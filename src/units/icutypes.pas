{
  This file is part of texrex.
  It contains header conversions and wrappers for the ICU library.
  Maintained by Roland Sch√§fer.
  http://texrex.sourceforge.net/

  See the file COPYING.IBM, included in this distribution, for
  details about the copyright.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
  OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
  HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
  INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
  FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
  NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
  WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
}


{
  Header translations for:
  - utypes.h (partial 4.8)
  - parseerr.h (complete 4.8)
}



unit IcuTypes;


{$MODE FPC}
{$CALLING CDECL}
{$PACKRECORDS C}
{$H+}

{$IFDEF DARWIN}
  {$LINKLIB icuuc}
{$ENDIF}


interface


uses
  CTypes;


{$I icuplatform.inc}

const
  {$IFDEF WINDOWS}
    LibName = 'icuuc' + IcuSuff + '.dll';
  {$ELSE}
    LibName = 'icuuc';
  {$ENDIF}
  ProcSuf = '_' + IcuSuff;




type

  // From umachine.h I get it that UChar in ICU is always UTF-16, and
  // on those platforms where wchar_t is exactly that, it is typedef'ed
  // as wchar_t, else as char16_t or even uint16_t. I understand this
  // is just to allow use of UChars as strings uncast on systems with
  // wchar_t = UTF-16. WChar in FPC is just a 16-bit char without
  // specific UCS-2 or UTF-16 semantics. (RS)
  UChar = WChar;
  PUChar = ^UChar;
  PPUChar = ^PUChar;

  UChar32 = CInt32;
  PUChar32 = ^UChar32;
  PPUChar32 = ^PUChar32;

  UBool = Boolean;
  PUBool = ^UBool;


type
  UErrorCode = CInt32;
  PUErrorCode = ^UErrorCode;
const
  U_USING_FALLBACK_WARNING = -128;
  U_ERROR_WARNING_START = -128;
  U_USING_DEFAULT_WARNING = -127;
  U_SAFECLONE_ALLOCATED_WARNING = -126;
  U_STATE_OLD_WARNING = -125;
  U_STRING_NOT_TERMINATED_WARNING = -124;
  U_SORT_KEY_TOO_SHORT_WARNING = -123;
  U_AMBIGUOUS_ALIAS_WARNING = -122;
  U_DIFFERENT_UCA_VERSION = -121;
  U_ERROR_WARNING_LIMIT = U_DIFFERENT_UCA_VERSION + 1;
  U_ZERO_ERROR =  0;
  U_ILLEGAL_ARGUMENT_ERROR =  1;
  U_MISSING_RESOURCE_ERROR =  2;
  U_INVALID_FORMAT_ERROR =  3;
  U_FILE_ACCESS_ERROR =  4;
  U_INTERNAL_PROGRAM_ERROR =  5;
  U_MESSAGE_PARSE_ERROR =  6;
  U_MEMORY_ALLOCATION_ERROR =  7;
  U_INDEX_OUTOFBOUNDS_ERROR =  8;
  U_PARSE_ERROR =  9;
  U_INVALID_CHAR_FOUND = 10;
  U_TRUNCATED_CHAR_FOUND = 11;
  U_ILLEGAL_CHAR_FOUND = 12;
  U_INVALID_TABLE_FORMAT = 13;
  U_INVALID_TABLE_FILE = 14;
  U_BUFFER_OVERFLOW_ERROR = 15;
  U_UNSUPPORTED_ERROR = 16;
  U_RESOURCE_TYPE_MISMATCH = 17;
  U_ILLEGAL_ESCAPE_SEQUENCE = 18;
  U_UNSUPPORTED_ESCAPE_SEQUENCE = 19;
  U_NO_SPACE_AVAILABLE = 20;
  U_CE_NOT_FOUND_ERROR = 21;
  U_PRIMARY_TOO_LONG_ERROR = 22;
  U_STATE_TOO_OLD_ERROR = 23;
  U_TOO_MANY_ALIASES_ERROR = 24;
  U_ENUM_OUT_OF_SYNC_ERROR = 25;
  U_INVARIANT_CONVERSION_ERROR = 26;
  U_INVALID_STATE_ERROR = 27;
  U_COLLATOR_VERSION_MISMATCH = 28;
  U_USELESS_COLLATOR_ERROR = 29;
  U_NO_WRITE_PERMISSION = 30;
  U_STANDARD_ERROR_LIMIT = U_NO_WRITE_PERMISSION + 1;
  U_BAD_VARIABLE_DEFINITION = $10000;
  U_PARSE_ERROR_START = $10000;
  U_MALFORMED_RULE = U_PARSE_ERROR_START + 1;
  U_MALFORMED_SET = U_MALFORMED_RULE + 1;
  U_MALFORMED_SYMBOL_REFERENCE = U_MALFORMED_SET + 1;
  U_MALFORMED_UNICODE_ESCAPE = U_MALFORMED_SYMBOL_REFERENCE + 1;
  U_MALFORMED_VARIABLE_DEFINITION = U_MALFORMED_UNICODE_ESCAPE + 1;
  U_MALFORMED_VARIABLE_REFERENCE = U_MALFORMED_VARIABLE_DEFINITION + 1;
  U_MISMATCHED_SEGMENT_DELIMITERS = U_MALFORMED_VARIABLE_REFERENCE + 1;
  U_MISPLACED_ANCHOR_START = U_MISMATCHED_SEGMENT_DELIMITERS + 1;
  U_MISPLACED_CURSOR_OFFSET = U_MISPLACED_ANCHOR_START + 1;
  U_MISPLACED_QUANTIFIER = U_MISPLACED_CURSOR_OFFSET + 1;
  U_MISSING_OPERATOR = U_MISPLACED_QUANTIFIER + 1;
  U_MISSING_SEGMENT_CLOSE = U_MISSING_OPERATOR + 1;
  U_MULTIPLE_ANTE_CONTEXTS = U_MISSING_SEGMENT_CLOSE + 1;
  U_MULTIPLE_CURSORS = U_MULTIPLE_ANTE_CONTEXTS + 1;
  U_MULTIPLE_POST_CONTEXTS = U_MULTIPLE_CURSORS + 1;
  U_TRAILING_BACKSLASH = U_MULTIPLE_POST_CONTEXTS + 1;
  U_UNDEFINED_SEGMENT_REFERENCE = U_TRAILING_BACKSLASH + 1;
  U_UNDEFINED_VARIABLE = U_UNDEFINED_SEGMENT_REFERENCE + 1;
  U_UNQUOTED_SPECIAL = U_UNDEFINED_VARIABLE + 1;
  U_UNTERMINATED_QUOTE = U_UNQUOTED_SPECIAL + 1;
  U_RULE_MASK_ERROR = U_UNTERMINATED_QUOTE + 1;
  U_MISPLACED_COMPOUND_FILTER = U_RULE_MASK_ERROR + 1;
  U_MULTIPLE_COMPOUND_FILTERS = U_MISPLACED_COMPOUND_FILTER + 1;
  U_INVALID_RBT_SYNTAX = U_MULTIPLE_COMPOUND_FILTERS + 1;
  U_INVALID_PROPERTY_PATTERN = U_INVALID_RBT_SYNTAX + 1;
  U_MALFORMED_PRAGMA = U_INVALID_PROPERTY_PATTERN + 1;
  U_UNCLOSED_SEGMENT = U_MALFORMED_PRAGMA + 1;
  U_ILLEGAL_CHAR_IN_SEGMENT = U_UNCLOSED_SEGMENT + 1;
  U_VARIABLE_RANGE_EXHAUSTED = U_ILLEGAL_CHAR_IN_SEGMENT + 1;
  U_VARIABLE_RANGE_OVERLAP = U_VARIABLE_RANGE_EXHAUSTED + 1;
  U_ILLEGAL_CHARACTER = U_VARIABLE_RANGE_OVERLAP + 1;
  U_INTERNAL_TRANSLITERATOR_ERROR = U_ILLEGAL_CHARACTER + 1;
  U_INVALID_ID = U_INTERNAL_TRANSLITERATOR_ERROR + 1;
  U_INVALID_FUNCTION = U_INVALID_ID + 1;
  U_PARSE_ERROR_LIMIT = U_INVALID_FUNCTION + 1;
  U_UNEXPECTED_TOKEN = $10100;
  U_FMT_PARSE_ERROR_START = $10100;
  U_MULTIPLE_DECIMAL_SEPARATORS = U_FMT_PARSE_ERROR_START + 1;
  U_MULTIPLE_DECIMAL_SEPERATORS = U_MULTIPLE_DECIMAL_SEPARATORS;
  U_MULTIPLE_EXPONENTIAL_SYMBOLS = U_MULTIPLE_DECIMAL_SEPERATORS + 1;
  U_MALFORMED_EXPONENTIAL_PATTERN = U_MULTIPLE_EXPONENTIAL_SYMBOLS + 1;
  U_MULTIPLE_PERCENT_SYMBOLS = U_MALFORMED_EXPONENTIAL_PATTERN + 1;
  U_MULTIPLE_PERMILL_SYMBOLS = U_MULTIPLE_PERCENT_SYMBOLS + 1;
  U_MULTIPLE_PAD_SPECIFIERS = U_MULTIPLE_PERMILL_SYMBOLS + 1;
  U_PATTERN_SYNTAX_ERROR = U_MULTIPLE_PAD_SPECIFIERS + 1;
  U_ILLEGAL_PAD_POSITION = U_PATTERN_SYNTAX_ERROR + 1;
  U_UNMATCHED_BRACES = U_ILLEGAL_PAD_POSITION + 1;
  U_UNSUPPORTED_PROPERTY = U_UNMATCHED_BRACES + 1;
  U_UNSUPPORTED_ATTRIBUTE = U_UNSUPPORTED_PROPERTY + 1;
  U_FMT_PARSE_ERROR_LIMIT = U_UNSUPPORTED_ATTRIBUTE + 1;
  U_BRK_INTERNAL_ERROR = $10200;
  U_BRK_ERROR_START = $10200;
  U_BRK_HEX_DIGITS_EXPECTED = U_BRK_ERROR_START + 1;
  U_BRK_SEMICOLON_EXPECTED = U_BRK_HEX_DIGITS_EXPECTED + 1;
  U_BRK_RULE_SYNTAX = U_BRK_SEMICOLON_EXPECTED + 1;
  U_BRK_UNCLOSED_SET = U_BRK_RULE_SYNTAX + 1;
  U_BRK_ASSIGN_ERROR = U_BRK_UNCLOSED_SET + 1;
  U_BRK_VARIABLE_REDFINITION = U_BRK_ASSIGN_ERROR + 1;
  U_BRK_MISMATCHED_PAREN = U_BRK_VARIABLE_REDFINITION + 1;
  U_BRK_NEW_LINE_IN_QUOTED_STRING = U_BRK_MISMATCHED_PAREN + 1;
  U_BRK_UNDEFINED_VARIABLE = U_BRK_NEW_LINE_IN_QUOTED_STRING + 1;
  U_BRK_INIT_ERROR = U_BRK_UNDEFINED_VARIABLE + 1;
  U_BRK_RULE_EMPTY_SET = U_BRK_INIT_ERROR + 1;
  U_BRK_UNRECOGNIZED_OPTION = U_BRK_RULE_EMPTY_SET + 1;
  U_BRK_MALFORMED_RULE_TAG = U_BRK_UNRECOGNIZED_OPTION + 1;
  U_BRK_ERROR_LIMIT = U_BRK_MALFORMED_RULE_TAG + 1;
  U_REGEX_INTERNAL_ERROR = $10300;
  U_REGEX_ERROR_START = $10300;
  U_REGEX_RULE_SYNTAX = U_REGEX_ERROR_START + 1;
  U_REGEX_INVALID_STATE = U_REGEX_RULE_SYNTAX + 1;
  U_REGEX_BAD_ESCAPE_SEQUENCE = U_REGEX_INVALID_STATE + 1;
  U_REGEX_PROPERTY_SYNTAX = U_REGEX_BAD_ESCAPE_SEQUENCE + 1;
  U_REGEX_UNIMPLEMENTED = U_REGEX_PROPERTY_SYNTAX + 1;
  U_REGEX_MISMATCHED_PAREN = U_REGEX_UNIMPLEMENTED + 1;
  U_REGEX_NUMBER_TOO_BIG = U_REGEX_MISMATCHED_PAREN + 1;
  U_REGEX_BAD_INTERVAL = U_REGEX_NUMBER_TOO_BIG + 1;
  U_REGEX_MAX_LT_MIN = U_REGEX_BAD_INTERVAL + 1;
  U_REGEX_INVALID_BACK_REF = U_REGEX_MAX_LT_MIN + 1;
  U_REGEX_INVALID_FLAG = U_REGEX_INVALID_BACK_REF + 1;
  U_REGEX_LOOK_BEHIND_LIMIT = U_REGEX_INVALID_FLAG + 1;
  U_REGEX_SET_CONTAINS_STRING = U_REGEX_LOOK_BEHIND_LIMIT + 1;
  U_REGEX_ERROR_LIMIT = U_REGEX_SET_CONTAINS_STRING + 1;
  U_IDNA_PROHIBITED_ERROR = $10400;
  U_IDNA_ERROR_START = $10400;
  U_IDNA_UNASSIGNED_ERROR = U_IDNA_ERROR_START + 1;
  U_IDNA_CHECK_BIDI_ERROR = U_IDNA_UNASSIGNED_ERROR + 1;
  U_IDNA_STD3_ASCII_RULES_ERROR = U_IDNA_CHECK_BIDI_ERROR + 1;
  U_IDNA_ACE_PREFIX_ERROR = U_IDNA_STD3_ASCII_RULES_ERROR + 1;
  U_IDNA_VERIFICATION_ERROR = U_IDNA_ACE_PREFIX_ERROR + 1;
  U_IDNA_LABEL_TOO_LONG_ERROR = U_IDNA_VERIFICATION_ERROR + 1;
  U_IDNA_ZERO_LENGTH_LABEL_ERROR = U_IDNA_LABEL_TOO_LONG_ERROR + 1;
  U_IDNA_ERROR_LIMIT = U_IDNA_ZERO_LENGTH_LABEL_ERROR + 1;
  U_STRINGPREP_PROHIBITED_ERROR = U_IDNA_PROHIBITED_ERROR;
  U_STRINGPREP_UNASSIGNED_ERROR = U_IDNA_UNASSIGNED_ERROR;
  U_STRINGPREP_CHECK_BIDI_ERROR = U_IDNA_CHECK_BIDI_ERROR;
  U_ERROR_LIMIT = U_IDNA_ERROR_LIMIT;


const
  U_PARSE_CONTEXT_LEN = 16;

type
  UParseError = packed record
    line : CInt32;
    offset : CInt32;
    preContext : array[0..U_PARSE_CONTEXT_LEN-1] of UChar;
    postContext : array[0..U_PARSE_CONTEXT_LEN-1] of UChar;
  end;
  PUParseError = ^UParseError;


function u_errorName(code : UErrorCode) : PChar;
  external LibName
  name 'u_errorName' + ProcSuf;

implementation


end.
